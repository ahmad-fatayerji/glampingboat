// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma" Keep commented 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid()) @db.Text
  email               String    @unique
  name                String?
  avatar              String?
  password            String?
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  reservations Reservation[]
}

model Reservation {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Text

  startDate DateTime
  endDate   DateTime
  adults    Int
  children  Int

  basePriceHt    Float // e.g. 1658.33
  optionsPriceHt Float @default(0)
  subtotalHt     Float
  tvaHt          Float
  taxSejourTtc   Float
  totalTtc       Float

  depositAmount   Float
  balanceAmount   Float
  securityDeposit Float

  createdAt DateTime @default(now())

  items ReservationOption[]
}

model Option {
  id          String   @id @default(uuid())
  name        String   @unique
  priceHt     Float
  description String?
  createdAt   DateTime @default(now())

  reservations ReservationOption[]
}

model ReservationOption {
  id            String      @id @default(uuid())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String
  option        Option      @relation(fields: [optionId], references: [id])
  optionId      String
  quantity      Int
  totalPriceHt  Float

  @@unique([reservationId, optionId])
}
